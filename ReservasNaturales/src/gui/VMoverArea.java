/*
  * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
  * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
  */
  package gui;
  import aplicacion.Area;
  import aplicacion.Usuario;
  import java.awt.Frame;
  import java.util.HashSet;
  import java.util.List;
  import java.util.Set;
  
  /**
   *
   * @author antonio
   */
  public class VMoverArea extends javax.swing.JDialog {
      aplicacion.FachadaAplicacion fa;
      private Usuario trabajador;
      /**
       * Creates new form VMoverArea
       */
      public VMoverArea(java.awt.Frame parent, boolean modal,aplicacion.FachadaAplicacion fa, Usuario trabajador ) {
          super(parent, modal);
          this.fa=fa;
          this.trabajador= trabajador;
          initComponents();
          MostrarAreas();
          
      }
  
      /**
       * This method is called from within the constructor to initialize the form.
       * WARNING: Do NOT modify this code. The content of this method is always
       * regenerated by the Form Editor.
       */
      @SuppressWarnings("unchecked")
      // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
      private void initComponents() {
  
          jLabel1 = new javax.swing.JLabel();
          jLabel2 = new javax.swing.JLabel();
          ScrollPaneAreasDisponibles = new javax.swing.JScrollPane();
          lstAreasDisponibles = new javax.swing.JList<Area>();
          ScrollPaneAreaseleccionada = new javax.swing.JScrollPane();
          lstAreaSeleccionada = new javax.swing.JList<Area>();
          btnDerecha = new javax.swing.JButton();
          btnIzquierda = new javax.swing.JButton();
          btnGuardar = new javax.swing.JButton();
          btnSalir = new javax.swing.JButton();
  
          setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
  
          jLabel1.setText("Áreas Disponibles");
  
          jLabel2.setText("Área Selecionada");
  
          lstAreasDisponibles.setModel(new ModeloListaStrings());
          ScrollPaneAreasDisponibles.setViewportView(lstAreasDisponibles);
  
          lstAreaSeleccionada.setModel(new ModeloListaStrings());
          ScrollPaneAreaseleccionada.setViewportView(lstAreaSeleccionada);
  
          btnDerecha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/flechaD.jpg"))); // NOI18N
          btnDerecha.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  btnDerechaActionPerformed(evt);
              }
          });
  
          btnIzquierda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/flechaI.jpg"))); // NOI18N
          btnIzquierda.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  btnIzquierdaActionPerformed(evt);
              }
          });
  
          btnGuardar.setText("Guardar");
          btnGuardar.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  btnGuardarActionPerformed(evt);
              }
          });
  
          btnSalir.setText("Salir");
          btnSalir.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  btnSalirActionPerformed(evt);
              }
          });
  
          javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
          getContentPane().setLayout(layout);
          layout.setHorizontalGroup(
              layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                  .addGap(14, 14, 14)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addGroup(layout.createSequentialGroup()
                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addGroup(layout.createSequentialGroup()
                                  .addGap(6, 6, 6)
                                  .addComponent(ScrollPaneAreasDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                          .addGap(60, 60, 60)
                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(btnDerecha)
                              .addComponent(btnIzquierda))
                          .addGap(53, 53, 53)
                          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                              .addGroup(layout.createSequentialGroup()
                                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                  .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                  .addGap(82, 82, 82))
                              .addGroup(layout.createSequentialGroup()
                                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                  .addComponent(ScrollPaneAreaseleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                  .addGap(47, 47, 47))))
                      .addGroup(layout.createSequentialGroup()
                          .addComponent(btnGuardar)
                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                          .addComponent(btnSalir)
                          .addGap(29, 29, 29))))
          );
          layout.setVerticalGroup(
              layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                  .addGap(27, 27, 27)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                      .addComponent(jLabel1)
                      .addComponent(jLabel2))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addComponent(ScrollPaneAreasDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addGroup(layout.createSequentialGroup()
                          .addComponent(btnDerecha)
                          .addGap(18, 18, 18)
                          .addComponent(btnIzquierda))
                      .addComponent(ScrollPaneAreaseleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                          .addComponent(btnGuardar)
                          .addContainerGap())
                      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                          .addComponent(btnSalir)
                          .addGap(18, 18, 18))))
          );
  
          pack();
      }// </editor-fold>//GEN-END:initComponents
  
      private void btnDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDerechaActionPerformed
                                               
      // Obtener el área seleccionada de la lista de áreas disponibles
      Area nuevaSeleccion = lstAreasDisponibles.getSelectedValue();
  
      if (nuevaSeleccion != null) {
          ModeloListaStrings modeloSeleccionada = (ModeloListaStrings) lstAreaSeleccionada.getModel();
          ModeloListaStrings modeloDisponibles = (ModeloListaStrings) lstAreasDisponibles.getModel();
  
          // Si ya hay una área seleccionada, la devolvemos a la lista de disponibles
          if (modeloSeleccionada.getSize() > 0) {
              Area anterior = modeloSeleccionada.getElementAt(0);
              modeloDisponibles.addElement(anterior);
              modeloSeleccionada.removeElement(anterior);
          }
  
          // Mover la nueva área seleccionada
          modeloSeleccionada.addElement(nuevaSeleccion);
          modeloDisponibles.removeElement(nuevaSeleccion);
      }
   
      }//GEN-LAST:event_btnDerechaActionPerformed
  
      private void btnIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzquierdaActionPerformed
          // TODO add your handling code here:
      fa.actualizarAreaUsuario(trabajador, null);
  
      // Limpia la lista de seleccionada
      ModeloListaStrings modeloSeleccionada = new ModeloListaStrings();
      lstAreaSeleccionada.setModel(modeloSeleccionada);
      }//GEN-LAST:event_btnIzquierdaActionPerformed
  
      private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
          // TODO add your handling code here:
          this.dispose();
      }//GEN-LAST:event_btnSalirActionPerformed
  
      private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
          // TODO add your handling code here:
      ModeloListaStrings modeloSeleccionado = (ModeloListaStrings) lstAreaSeleccionada.getModel();
      Area areaFinal = null;
      
      if (modeloSeleccionado.getSize() > 0) {
          areaFinal = modeloSeleccionado.getElementAt(0);  // Solo permites una área seleccionada
      }
  
      boolean exito = fa.actualizarAreaUsuario(trabajador, areaFinal);
  
      if (exito) {
          javax.swing.JOptionPane.showMessageDialog(this, "Área actualizada correctamente.");
          this.dispose();
      } else {
          javax.swing.JOptionPane.showMessageDialog(this, "Error al actualizar el área del trabajador.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
      }
          
      }//GEN-LAST:event_btnGuardarActionPerformed

<<<<<<< HEAD
/**
 *
 * @author antonio
 */
public class VMoverArea extends javax.swing.JDialog {
    aplicacion.FachadaAplicacion fa;
    private Usuario trabajador;
    /**
     * Creates new form VMoverArea
     */
    public VMoverArea(java.awt.Frame parent, boolean modal,aplicacion.FachadaAplicacion fa, Usuario trabajador ) {
        super(parent, modal);
        this.fa=fa;
        this.trabajador= trabajador;
        initComponents();
        MostrarAreas();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ScrollPaneAreasDisponibles = new javax.swing.JScrollPane();
        lstAreasDisponibles = new javax.swing.JList<Area>();
        ScrollPaneAreaseleccionada = new javax.swing.JScrollPane();
        lstAreaSeleccionada = new javax.swing.JList<Area>();
        btnDerecha = new javax.swing.JButton();
        btnIzquierda = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Áreas Disponibles");

        jLabel2.setText("Área Selecionada");

        lstAreasDisponibles.setModel(new ModeloListaStrings());
        ScrollPaneAreasDisponibles.setViewportView(lstAreasDisponibles);

        lstAreaSeleccionada.setModel(new ModeloListaStrings());
        ScrollPaneAreaseleccionada.setViewportView(lstAreaSeleccionada);

        btnDerecha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/flechaD.jpg"))); // NOI18N
        btnDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDerechaActionPerformed(evt);
            }
        });

        btnIzquierda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/flechaI.jpg"))); // NOI18N
        btnIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzquierdaActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(ScrollPaneAreasDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDerecha)
                            .addComponent(btnIzquierda))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(82, 82, 82))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ScrollPaneAreaseleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSalir)
                        .addGap(29, 29, 29))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPaneAreasDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDerecha)
                        .addGap(18, 18, 18)
                        .addComponent(btnIzquierda))
                    .addComponent(ScrollPaneAreaseleccionada, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnGuardar)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSalir)
                        .addGap(18, 18, 18))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDerechaActionPerformed
                                             
    // Obtener el área seleccionada de la lista de áreas disponibles
    Area nuevaSeleccion = lstAreasDisponibles.getSelectedValue();

    if (nuevaSeleccion != null) {
        ModeloListaStrings modeloSeleccionada = (ModeloListaStrings) lstAreaSeleccionada.getModel();
        ModeloListaStrings modeloDisponibles = (ModeloListaStrings) lstAreasDisponibles.getModel();

        // Si ya hay una área seleccionada, la devolvemos a la lista de disponibles
        if (modeloSeleccionada.getSize() > 0) {
            Area anterior = modeloSeleccionada.getElementAt(0);
            modeloDisponibles.addElement(anterior);
            modeloSeleccionada.removeElement(anterior);
        }

        // Mover la nueva área seleccionada
        modeloSeleccionada.addElement(nuevaSeleccion);
        modeloDisponibles.removeElement(nuevaSeleccion);
    }
 
    }//GEN-LAST:event_btnDerechaActionPerformed

    private void btnIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzquierdaActionPerformed
        // TODO add your handling code here:
     // Obtener el área seleccionada de la lista de áreas seleccionadas
    Area areaSeleccionada = lstAreaSeleccionada.getSelectedValue();

    // Verificar si hay un área seleccionada
    if (areaSeleccionada != null) {
        ModeloListaStrings modeloSeleccionada = (ModeloListaStrings) lstAreaSeleccionada.getModel();
        ModeloListaStrings modeloDisponibles = (ModeloListaStrings) lstAreasDisponibles.getModel();

        // Mover el área seleccionada de la lista de seleccionadas a la lista de disponibles
        modeloSeleccionada.removeElement(areaSeleccionada);
        modeloDisponibles.addElement(areaSeleccionada);

        // Actualizar el área del trabajador a null, ya que no tiene área seleccionada
        fa.actualizarAreaUsuario(trabajador, null);

        // Actualizar la lista de áreas disponibles y seleccionadas
        lstAreasDisponibles.setModel(modeloDisponibles);
        lstAreaSeleccionada.setModel(modeloSeleccionada);
    } else {
        // Si no hay área seleccionada, puedes mostrar un mensaje informativo (opcional)
        javax.swing.JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna área.", "Información", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_btnIzquierdaActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
    ModeloListaStrings modeloSeleccionado = (ModeloListaStrings) lstAreaSeleccionada.getModel();
    Area areaFinal = null;
    
    if (modeloSeleccionado.getSize() > 0) {
        areaFinal = modeloSeleccionado.getElementAt(0);  // Solo permites una área seleccionada
    }

    boolean exito = fa.actualizarAreaUsuario(trabajador, areaFinal);

    if (exito) {
        javax.swing.JOptionPane.showMessageDialog(this, "Área actualizada correctamente.");
        this.dispose();
    } else {
        javax.swing.JOptionPane.showMessageDialog(this, "Error al actualizar el área del trabajador.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
 void MostrarAreas(){
    ModeloListaStrings modeloDisponibles = new ModeloListaStrings();
    ModeloListaStrings modeloSeleccionada = new ModeloListaStrings();

    List<Area> areasDisponibles = fa.obtenerAreas(); 
    Area areaActual = trabajador.getArea(); // Obtener el área actual del trabajador

    for (Area area : areasDisponibles) {
        if (areaActual != null && area.getNombreReserva().equals(areaActual.getNombreReserva())) {
            modeloSeleccionada.addElement(area);  // Mostrar en lista de seleccionada
        } else {
            modeloDisponibles.addElement(area);   // Mostrar en lista de disponibles
        }
    }

    lstAreasDisponibles.setModel(modeloDisponibles);
    lstAreaSeleccionada.setModel(modeloSeleccionada);
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPaneAreasDisponibles;
    private javax.swing.JScrollPane ScrollPaneAreaseleccionada;
    private javax.swing.JButton btnDerecha;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnIzquierda;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<Area> lstAreaSeleccionada;
    private javax.swing.JList<Area
    > lstAreasDisponibles;
    // End of variables declaration//GEN-END:variables
}
=======
   void MostrarAreas(){
      ModeloListaStrings modeloDisponibles = new ModeloListaStrings();
      ModeloListaStrings modeloSeleccionada = new ModeloListaStrings();
  
      List<Area> areasDisponibles = fa.obtenerAreas(); 
      Area areaActual = trabajador.getArea(); // Obtener el área actual del trabajador
  
      for (Area area : areasDisponibles) {
          if (areaActual != null && area.getNombreReserva().equals(areaActual.getNombreReserva())) {
              modeloSeleccionada.addElement(area);  // Mostrar en lista de seleccionada
          } else {
              modeloDisponibles.addElement(area);   // Mostrar en lista de disponibles
          }
      }
  
      lstAreasDisponibles.setModel(modeloDisponibles);
      lstAreaSeleccionada.setModel(modeloSeleccionada);
  }
  
  
      // Variables declaration - do not modify//GEN-BEGIN:variables
      private javax.swing.JScrollPane ScrollPaneAreasDisponibles;
      private javax.swing.JScrollPane ScrollPaneAreaseleccionada;
      private javax.swing.JButton btnDerecha;
      private javax.swing.JButton btnGuardar;
      private javax.swing.JButton btnIzquierda;
      private javax.swing.JButton btnSalir;
      private javax.swing.JLabel jLabel1;
      private javax.swing.JLabel jLabel2;
      private javax.swing.JList<Area> lstAreaSeleccionada;
      private javax.swing.JList<Area
      > lstAreasDisponibles;
      // End of variables declaration//GEN-END:variables
  }
>>>>>>> e1d62c817c6c860593ad1fd6c1d0a6108d4b853d
