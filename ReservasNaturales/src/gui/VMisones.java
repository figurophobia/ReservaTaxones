/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package gui;
import aplicacion.Especie;
import aplicacion.Mision;
import aplicacion.Usuario;
import java.awt.Frame;
import java.sql.Date;
import java.time.LocalDate;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
/**
 *
 * @author alumnogreibd
 */
public class VMisones extends javax.swing.JDialog {
    aplicacion.FachadaAplicacion fa;
    /**
     * Creates new form VMisones2
     */
    public VMisones(java.awt.Frame parent, boolean modal,aplicacion.FachadaAplicacion fa) {
        super(parent, modal);
        this.fa=fa;
        initComponents();
        TablaMisiones.setModel(new ModeloTablaMisiones());
        refreshComboBoxes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buscarTF = new javax.swing.JTextField();
        buscarbtn = new javax.swing.JButton();
        checkTrabajador = new javax.swing.JCheckBox();
        checkEspecie = new javax.swing.JCheckBox();
        checkEstado = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaMisiones = new javax.swing.JTable();
        NuevaMision = new javax.swing.JButton();
        EliminarMision = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        Completed = new javax.swing.JButton();
        masExperimentadobtn = new javax.swing.JButton();
        updatebtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Misiones");

        buscarTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarTFActionPerformed(evt);
            }
        });

        buscarbtn.setText("Buscar");
        buscarbtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buscarbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarbtnActionPerformed(evt);
            }
        });

        checkTrabajador.setText("Trabajador");
        checkTrabajador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTrabajadorActionPerformed(evt);
            }
        });

        checkEspecie.setText("Especie");

        checkEstado.setText("Estado");

        TablaMisiones.setModel(new ModeloTablaMisiones());
        jScrollPane1.setViewportView(TablaMisiones);

        NuevaMision.setText("Nueva");
        NuevaMision.setToolTipText("");
        NuevaMision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevaMisionActionPerformed(evt);
            }
        });

        EliminarMision.setText("Borrar");
        EliminarMision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarMisionActionPerformed(evt);
            }
        });

        exitbtn.setBackground(new java.awt.Color(231, 76, 60));
        exitbtn.setText("Salir");
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });

        Completed.setBackground(new java.awt.Color(30, 132, 73));
        Completed.setText("Completada");
        Completed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompletedActionPerformed(evt);
            }
        });

        masExperimentadobtn.setText("Escoger Trabajador MÃ¡s Experimentado");
        masExperimentadobtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masExperimentadobtnActionPerformed(evt);
            }
        });

        updatebtn.setText("Actualizar");
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(exitbtn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(NuevaMision)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EliminarMision)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updatebtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Completed))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(buscarTF)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(checkTrabajador)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkEspecie)
                                        .addGap(18, 18, 18)
                                        .addComponent(checkEstado)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 410, Short.MAX_VALUE)
                                        .addComponent(masExperimentadobtn))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buscarbtn)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buscarTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarbtn))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkTrabajador)
                            .addComponent(checkEspecie)
                            .addComponent(checkEstado)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(masExperimentadobtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(EliminarMision, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Completed, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(NuevaMision, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updatebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(77, 77, 77)
                .addComponent(exitbtn)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buscarTFActionPerformed

    private void buscarbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarbtnActionPerformed
        // TODO add your handling code here:
        buscarMisiones();
    }//GEN-LAST:event_buscarbtnActionPerformed

    private void checkTrabajadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTrabajadorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkTrabajadorActionPerformed

    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitbtnActionPerformed

    private void EliminarMisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarMisionActionPerformed
        int filaSeleccionada = TablaMisiones.getSelectedRow();

        if (filaSeleccionada != -1) {
            ModeloTablaMisiones modelo = (ModeloTablaMisiones) TablaMisiones.getModel();
            Mision misionAEliminar = modelo.getFila(filaSeleccionada);

            int opcion = JOptionPane.showConfirmDialog(
                this,
                "Â¿Deseas borrar esta misiÃ³n?",
                "ConfirmaciÃ³n de borrado",
                JOptionPane.YES_NO_OPTION
            );

            if (opcion == JOptionPane.YES_OPTION) {
                // Eliminar misiÃ³n a travÃ©s del DAO
                fa.eliminarMision(misionAEliminar);
                List<Mision> nuevasMisiones = fa.obtenerMisiones();
                modelo.setFilas(nuevasMisiones);

                VAviso mensajeExito = new VAviso((Frame) getParent(), true, "La misiÃ³n fue eliminada exitosamente.");
                mensajeExito.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(
                this,
                "Selecciona una misiÃ³n para poder eliminarla.",
                "Aviso",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_EliminarMisionActionPerformed
    
    private void CompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompletedActionPerformed
    int indexRow = TablaMisiones.getSelectedRow();

    if (indexRow != -1) {
        ModeloTablaMisiones modeloMisiones = (ModeloTablaMisiones) TablaMisiones.getModel();
        Mision misionActual = modeloMisiones.getMision(indexRow); // Obtener la misiÃ³n de la fila seleccionada

        if (misionActual.getFechaFin() == null) {
            // Completar misiÃ³n a travÃ©s del DAO
            fa.completarMision(misionActual);
            JOptionPane.showMessageDialog(this, "La misiÃ³n ha sido completada con Ã©xito.");
        } else {
            JOptionPane.showMessageDialog(this, "Esta misiÃ³n ya se encuentra completada.");
        }

        // Refrescar la fila modificada en la tabla
        modeloMisiones.fireTableRowsUpdated(indexRow, indexRow);
    } else {
        JOptionPane.showMessageDialog(this, "Debes seleccionar una fila para completar una misiÃ³n.");
    }
    }//GEN-LAST:event_CompletedActionPerformed

    private void masExperimentadobtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masExperimentadobtnActionPerformed

    
    
    }//GEN-LAST:event_masExperimentadobtnActionPerformed

    private void NuevaMisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevaMisionActionPerformed
    // Obtener el trabajador que estarÃ¡ asignado a la misiÃ³n
    Usuario trabajadorAsignado = fa.obtenerTrabajadorMision();

    if (trabajadorAsignado != null) {
        // Crear una misiÃ³n nueva con valores por defecto
        Mision misionTemporal = new Mision(
            trabajadorAsignado,
            "",                         // Especie vacÃ­a inicialmente
            Date.valueOf(LocalDate.now()), // Fecha de inicio actual
            null,                       // Fecha de fin aÃºn no asignada
            ""                          // DescripciÃ³n vacÃ­a
        );

        // Obtener el modelo de la tabla y aÃ±adir la misiÃ³n
        ModeloTablaMisiones modelo = (ModeloTablaMisiones) TablaMisiones.getModel();
        modelo.anhadeFila(misionTemporal);

        // Seleccionar la nueva fila y activar ediciÃ³n
        int filaInsertada = modelo.getRowCount() - 1;
        TablaMisiones.setRowSelectionInterval(filaInsertada, filaInsertada);
        TablaMisiones.editCellAt(filaInsertada, 0);
        TablaMisiones.requestFocusInWindow();
    } else {
        JOptionPane.showMessageDialog(this, "No se pudo obtener un trabajador sin misiones activas.");
    }
    }//GEN-LAST:event_NuevaMisionActionPerformed

    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnActionPerformed
    // Obtener el modelo actual de la tabla
    ModeloTablaMisiones datosTabla = (ModeloTablaMisiones) TablaMisiones.getModel();

    // Listas con los datos actuales y los originales
    List<Mision> listaActual = datosTabla.getMisiones();
    List<Mision> listaOriginal = datosTabla.getMisionesOriginales();

    for (int indice = 0; indice < listaActual.size(); indice++) {
        Mision nueva = listaActual.get(indice);
        Mision previa = (indice < listaOriginal.size()) ? listaOriginal.get(indice) : null;

        if (previa != null) {
            // Si existen ambas, comparamos
            if (misionModificada(previa, nueva)) {
                fa.actualizarMision(nueva, previa);
            }
        } else {
            // Si no hay misiÃ³n previa, se trata de una nueva
            fa.agregarNuevaMision(nueva);
        }
    }

    // Confirmar Ã©xito al usuario
    JOptionPane.showMessageDialog(this, "Las misiones han sido actualizadas correctamente.");



    }//GEN-LAST:event_updatebtnActionPerformed

    private boolean misionModificada(Mision anterior, Mision actual) {
        boolean trabajadorCambiado = !anterior.getTrabajador().getNombre().equals(actual.getTrabajador().getNombre());
        boolean cambioEspecie = !anterior.getEspecie().equals(actual.getEspecie());
        boolean cambioDescripcion = !anterior.getDescripcion().equals(actual.getDescripcion());
        boolean inicioDistinto = !anterior.getFechaInicio().equals(actual.getFechaInicio());

        boolean finDistinto = false;
        if (anterior.getFechaFin() == null && actual.getFechaFin() != null) {
            finDistinto = true;
        } else if (anterior.getFechaFin() != null && !anterior.getFechaFin().equals(actual.getFechaFin())) {
            finDistinto = true;
        }

        return trabajadorCambiado || cambioEspecie || cambioDescripcion || inicioDistinto || finDistinto;
    }

    
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Completed;
    private javax.swing.JButton EliminarMision;
    private javax.swing.JButton NuevaMision;
    private javax.swing.JTable TablaMisiones;
    private javax.swing.JTextField buscarTF;
    private javax.swing.JButton buscarbtn;
    private javax.swing.JCheckBox checkEspecie;
    private javax.swing.JCheckBox checkEstado;
    private javax.swing.JCheckBox checkTrabajador;
    private javax.swing.JButton exitbtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton masExperimentadobtn;
    private javax.swing.JButton updatebtn;
    // End of variables declaration//GEN-END:variables

    private void buscarMisiones() {
        ModeloTablaMisiones mm;
        mm = (ModeloTablaMisiones) TablaMisiones.getModel();
        String textoBusqueda = buscarTF.getText().trim();

        if (textoBusqueda.isEmpty()) {
            mm.setFilas(fa.obtenerMisiones());
        } else {
            boolean criterioSeleccionado = false;

            switch (getSelectedCheckBox()) {
                case "Trabajador":
                    mm.setFilas(fa.obtenerMisionesTrabajador(textoBusqueda));
                    criterioSeleccionado = true;
                    break;
                case "Estado":
                    mm.setFilas(fa.obtenerMisonesEstado(textoBusqueda));
                    criterioSeleccionado = true;
                    break;
                case "Especie":
                    mm.setFilas(fa.obtenerMisionesEspecie(textoBusqueda));
                    criterioSeleccionado = true;
                    break;
                default:
                    break;
            }

            if (!criterioSeleccionado) {
                VAviso va = new VAviso((Frame) getParent(), true, "Selecciona un criterio de bÃºsqueda");
                va.setVisible(true);
            }
        }
    }

    private String getSelectedCheckBox() {
        if (checkTrabajador.isSelected()) {
            return "Trabajador";
        } else if (checkEstado.isSelected()) {
            return "Estado";
        } else if (checkEspecie.isSelected()) {
            return "Especie";
        }
        return "";
    }

    public void refreshComboBoxes() {
        
        // Suponiendo que ya tienes la lista de trabajadores y especies
        List<Usuario> listaTrabajadores = fa.obtenerTodosLosTrabajadores(); // Obtener trabajadores
        List<Especie> listaEspecies = fa.obtenerEspecies("");

        // Crear los combo boxes
        JComboBox<String> comboTrabajadores = new JComboBox<>();
        for (Usuario u : listaTrabajadores) {
            comboTrabajadores.addItem(u.getNombre());
        }

        JComboBox<String> comboEspecies = new JComboBox<>();
        for (Especie especie : listaEspecies) {
            comboEspecies.addItem(especie.getNombreCientifico());
        }

        // Asignar el editor del combo box a las columnas correspondientes
        TablaMisiones.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(comboTrabajadores));
        TablaMisiones.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(comboEspecies));

    }
}
