/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package gui;
import aplicacion.Especie;
import aplicacion.Mision;
import aplicacion.Usuario;
import java.awt.Frame;
import java.sql.Date;
import java.time.LocalDate;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
/**
 *
 * @author alumnogreibd
 */
public class VMisones extends javax.swing.JDialog {
    aplicacion.FachadaAplicacion fa;
    /**
     * Creates new form VMisones2
     */
    public VMisones(java.awt.Frame parent, boolean modal,aplicacion.FachadaAplicacion fa) {
        super(parent, modal);
        this.fa=fa;
        initComponents();
        TablaMisiones.setModel(new ModeloTablaMisiones());
        refreshComboBoxes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buscarTF = new javax.swing.JTextField();
        buscarbtn = new javax.swing.JButton();
        checkTrabajador = new javax.swing.JCheckBox();
        checkEspecie = new javax.swing.JCheckBox();
        checkEstado = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaMisiones = new javax.swing.JTable();
        NuevaMision = new javax.swing.JButton();
        EliminarMision = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        Completed = new javax.swing.JButton();
        masExperimentadobtn = new javax.swing.JButton();
        updatebtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Misiones");

        buscarTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarTFActionPerformed(evt);
            }
        });

        buscarbtn.setText("Buscar");
        buscarbtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buscarbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarbtnActionPerformed(evt);
            }
        });

        checkTrabajador.setText("Trabajador");
        checkTrabajador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTrabajadorActionPerformed(evt);
            }
        });

        checkEspecie.setText("Especie");

        checkEstado.setText("Estado");

        TablaMisiones.setModel(new ModeloTablaMisiones());
        jScrollPane1.setViewportView(TablaMisiones);

        NuevaMision.setText("Nueva Misión");
        NuevaMision.setToolTipText("");
        NuevaMision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevaMisionActionPerformed(evt);
            }
        });

        EliminarMision.setText("Borrar");
        EliminarMision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarMisionActionPerformed(evt);
            }
        });

        exitbtn.setBackground(new java.awt.Color(231, 76, 60));
        exitbtn.setText("Salir");
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });

        Completed.setBackground(new java.awt.Color(30, 132, 73));
        Completed.setText("Completada");
        Completed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompletedActionPerformed(evt);
            }
        });

        masExperimentadobtn.setText("Escoger Trabajador Más Experimentado");
        masExperimentadobtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masExperimentadobtnActionPerformed(evt);
            }
        });

        updatebtn.setText("Actualizar");
        updatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(exitbtn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(NuevaMision)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EliminarMision)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updatebtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Completed))
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(buscarTF)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(checkTrabajador)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkEspecie)
                                        .addGap(18, 18, 18)
                                        .addComponent(checkEstado)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 323, Short.MAX_VALUE)
                                        .addComponent(masExperimentadobtn))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buscarbtn)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buscarTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarbtn))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkTrabajador)
                            .addComponent(checkEspecie)
                            .addComponent(checkEstado)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(masExperimentadobtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(EliminarMision, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Completed, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NuevaMision, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updatebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77)
                .addComponent(exitbtn)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buscarTFActionPerformed

    private void buscarbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarbtnActionPerformed
        // TODO add your handling code here:
        buscarMisiones();
    }//GEN-LAST:event_buscarbtnActionPerformed

    private void checkTrabajadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTrabajadorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkTrabajadorActionPerformed

    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitbtnActionPerformed

    private void EliminarMisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarMisionActionPerformed
        // TODO add your handling code here:
        int selectedRow=TablaMisiones.getSelectedRow();
        
                
                
        if (selectedRow!=-1) {
            ModeloTablaMisiones mm=(ModeloTablaMisiones) TablaMisiones.getModel();
            Mision seleccionado=mm.getFila(selectedRow);
            int confirm = javax.swing.JOptionPane.showConfirmDialog(this, 
            "¿Estás seguro de que deseas eliminar esta mision?",
            "Confirmar eliminación", 
            javax.swing.JOptionPane.YES_NO_OPTION);

            if (confirm == javax.swing.JOptionPane.YES_OPTION) {

                fa.eliminarMision(seleccionado);
                mm.setFilas(fa.obtenerMisiones());

                VAviso aviso = new VAviso((Frame)getParent(), true, "Mision eliminada correctamente.");
                aviso.setVisible(true);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, 
                "Debes seleccionar un trabajador para eliminar.",
                "Error", 
                javax.swing.JOptionPane.ERROR_MESSAGE);
        
    }//GEN-LAST:event_EliminarMisionActionPerformed
    }
    private void CompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompletedActionPerformed
        int filaSeleccionada = TablaMisiones.getSelectedRow();

        if (filaSeleccionada != -1) {
            ModeloTablaMisiones modelo = (ModeloTablaMisiones) TablaMisiones.getModel();
            Mision misionSeleccionada = modelo.getMision(filaSeleccionada); // método que devuelve la misión de esa fila

            if (misionSeleccionada.getFechaFin() == null) {
                fa.completarMision(misionSeleccionada);
                JOptionPane.showMessageDialog(this, "Misión marcada como completada.");
            } else {
                JOptionPane.showMessageDialog(this, "La misión ya estaba completada.");
            }

            // Opcional: actualiza la vista si hace falta
            modelo.fireTableRowsUpdated(filaSeleccionada, filaSeleccionada);
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una misión para marcar como completada.");
        }
    }//GEN-LAST:event_CompletedActionPerformed

    private void masExperimentadobtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masExperimentadobtnActionPerformed
        // TODO add your handling code here:
        String especie = buscarTF.getText().trim(); 
        if (!especie.isEmpty()) {
            Usuario trabajador = fa.obtenerTrabajadorMasExperimentado(especie); // pasar la especie
            if (trabajador != null && checkEspecie.isSelected()) {
                VAviso aviso = new VAviso((Frame) getParent(), true, "El trabajador más experimentado para la especie '" + especie + "' es: " + trabajador);
                aviso.setVisible(true);
                
            } else {
                javax.swing.JOptionPane.showMessageDialog(VMisones.this, 
                    "No se pudo determinar el trabajador más experimentado para la especie '" + especie + "'.",
                    "Aviso", 
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(VMisones.this, 
                "Por favor, introduzca una especie.",
                "Campo vacío", 
                javax.swing.JOptionPane.WARNING_MESSAGE);
        }
    
    
    }//GEN-LAST:event_masExperimentadobtnActionPerformed

    private void NuevaMisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevaMisionActionPerformed
        // TODO add your handling code here:
        Usuario usuarioMision= fa.obtenerTrabajadorMision();
        Mision nuevaMision = new Mision(
            usuarioMision,
            "", // especie
            Date.valueOf(LocalDate.now()), // fechaInicio: hoy
            null, // fechaFin: no completada
            "" // descripción
        );
    // Obtener el modelo de la tabla
     ModeloTablaMisiones mm = ( ModeloTablaMisiones) TablaMisiones.getModel();

    mm.anhadeFila(nuevaMision);

    int lastRow = mm.getRowCount() - 1;
    TablaMisiones.setRowSelectionInterval(lastRow, lastRow);

    TablaMisiones.editCellAt(lastRow, 0);

   
    TablaMisiones.requestFocusInWindow();
    TablaMisiones.requestFocusInWindow();
        
       
    }//GEN-LAST:event_NuevaMisionActionPerformed

    private void updatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebtnActionPerformed
    // Obtener el modelo de la tabla
    ModeloTablaMisiones modelo = (ModeloTablaMisiones) TablaMisiones.getModel();

    // Recoger las misiones actuales y las originales
    List<Mision> misionesActuales = modelo.getMisiones();
    List<Mision> misionesOriginales = modelo.getMisionesOriginales(); // Obtienes las misiones originales




    for (int i = 0; i < misionesActuales.size(); i++) {
        Mision misionActual = misionesActuales.get(i);
        Mision misionOriginal = (i < misionesOriginales.size()) ? misionesOriginales.get(i) : null;



        // Si la misión original existe, compararla con la misión actual
        if (misionOriginal != null) {
            // Verificar si los campos clave han cambiado
            if (hasMisionChanged(misionOriginal, misionActual)) {
                // Si ha cambiado, actualizarla
                fa.actualizarMision(misionActual, misionOriginal);
            }
        } else {
            // Si la misión original es null, significa que es una misión nueva, así que la agregamos
            fa.agregarNuevaMision(misionActual);
        }
    }

    // Mostrar mensaje de éxito
    JOptionPane.showMessageDialog(this, "Misiones actualizadas correctamente.");
    }//GEN-LAST:event_updatebtnActionPerformed

    private boolean hasMisionChanged(Mision misionOriginal, Mision misionActual) {
        boolean nombresDistintos = !misionOriginal.getTrabajador().getNombre().equals(misionActual.getTrabajador().getNombre());
        boolean especieDistinta = !misionOriginal.getEspecie().equals(misionActual.getEspecie());
        boolean descripcionDistinta = !misionOriginal.getDescripcion().equals(misionActual.getDescripcion());
        boolean fechaInicioDistinta = !misionOriginal.getFechaInicio().equals(misionActual.getFechaInicio());

        boolean fechaFinDistinta = false;
        if (misionOriginal.getFechaFin() == null && misionActual.getFechaFin() != null) {
            fechaFinDistinta = true;
        } else if (misionOriginal.getFechaFin() != null && !misionOriginal.getFechaFin().equals(misionActual.getFechaFin())) {
            fechaFinDistinta = true;
        }

        return nombresDistintos || especieDistinta || descripcionDistinta || fechaInicioDistinta || fechaFinDistinta;
    }

    
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Completed;
    private javax.swing.JButton EliminarMision;
    private javax.swing.JButton NuevaMision;
    private javax.swing.JTable TablaMisiones;
    private javax.swing.JTextField buscarTF;
    private javax.swing.JButton buscarbtn;
    private javax.swing.JCheckBox checkEspecie;
    private javax.swing.JCheckBox checkEstado;
    private javax.swing.JCheckBox checkTrabajador;
    private javax.swing.JButton exitbtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton masExperimentadobtn;
    private javax.swing.JButton updatebtn;
    // End of variables declaration//GEN-END:variables

    private void buscarMisiones() {
        ModeloTablaMisiones mm;
        mm = (ModeloTablaMisiones) TablaMisiones.getModel();
        String textoBusqueda = buscarTF.getText().trim();

        if (textoBusqueda.isEmpty()) {
            mm.setFilas(fa.obtenerMisiones());
        } else {
            boolean criterioSeleccionado = false;

            switch (getSelectedCheckBox()) {
                case "Trabajador":
                    mm.setFilas(fa.obtenerMisionesTrabajador(textoBusqueda));
                    criterioSeleccionado = true;
                    break;
                case "Estado":
                    mm.setFilas(fa.obtenerMisonesEstado(textoBusqueda));
                    criterioSeleccionado = true;
                    break;
                case "Especie":
                    mm.setFilas(fa.obtenerMisionesEspecie(textoBusqueda));
                    criterioSeleccionado = true;
                    break;
                default:
                    break;
            }

            if (!criterioSeleccionado) {
                VAviso va = new VAviso((Frame) getParent(), true, "Selecciona un criterio de búsqueda");
                va.setVisible(true);
            }
        }
    }

    private String getSelectedCheckBox() {
        if (checkTrabajador.isSelected()) {
            return "Trabajador";
        } else if (checkEstado.isSelected()) {
            return "Estado";
        } else if (checkEspecie.isSelected()) {
            return "Especie";
        }
        return "";
    }

    public void refreshComboBoxes() {
        
        // Suponiendo que ya tienes la lista de trabajadores y especies
        List<Usuario> listaTrabajadores = fa.obtenerTodosLosTrabajadores(); // Obtener trabajadores
        List<Especie> listaEspecies = fa.obtenerEspecies("");

        // Crear los combo boxes
        JComboBox<String> comboTrabajadores = new JComboBox<>();
        for (Usuario u : listaTrabajadores) {
            comboTrabajadores.addItem(u.getNombre());
        }

        JComboBox<String> comboEspecies = new JComboBox<>();
        for (Especie especie : listaEspecies) {
            comboEspecies.addItem(especie.getNombreCientifico());
        }

        // Asignar el editor del combo box a las columnas correspondientes
        TablaMisiones.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(comboTrabajadores));
        TablaMisiones.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(comboEspecies));

    }
}
